name: spaemis CI-CD
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

jobs:
  linting-and-docs:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dev dependencies
      run: |
        pip install --upgrade pip wheel
        pip install -e .[dev]
    # TODO: add `pylint src`
    - name: Formatting and linters
      run: |
        black --check src tests setup.py
        isort --check-only --quiet src tests setup.py
        #  pydocstyle src
        bandit -r src
        flake8 src tests setup.py
#     - name: Build docs
#       # treat warnings as errors (-W)...
#       # ...but not when being nitpicky (-n)
#       run: |
#           sphinx-build -M html docs/source docs/build -qW
#           sphinx-build -M html docs/source docs/build -Eqn -b coverage
#           if [[ -s docs/build/html/python.txt ]]
#           then
#               echo
#               echo \"Error: Documentation missing:\"
#               echo
#               cat docs/build/html/python.txt
#               exit 1
#           fi

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.9", "3.10"]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install test dependencies
      run: |
        pip install --upgrade --user pip wheel
        pip install -e .[tests]
        pip freeze
    - name: Decrypt inventory files
      run: ./scripts/decrypt_secrets.sh
      env:
        LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}
    - name: Test with pytest (${{ runner.os }})
      if: ${{ !startsWith(runner.os, 'Windows') }}
      env:
        MIN_COVERAGE: 90
      run: |
          pytest tests -r a --cov=spaemis --cov-report=xml --cov-fail-under=${MIN_COVERAGE}
          if ! coverage report --fail-under=${MIN_COVERAGE} --show-missing
          then
              echo
              echo "Error: Test coverage has to be at least ${MIN_COVERAGE}"
              exit 1
          fi
    - name: Test with pytest (${{ runner.os }})
      if: startsWith(runner.os, 'Windows')
      env:
        MIN_COVERAGE: 60
      run: |
          pytest tests -r a --cov=spaemis --cov-report=term-missing --cov-fail-under=$env:MIN_COVERAGE
    - name: Upload coverage to Codecov
      if: startsWith(runner.os, 'Linux') && matrix.python-version == 3.9
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  create-dist:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install --upgrade pip wheel
        pip install -e .[dev]
    - name: Create package
      run: |
        python setup.py sdist bdist_wheel --universal
        twine check dist/*
    - name: Check package files
      run: |
        for f in README.rst LICENSE CHANGELOG.md
        do
          if ! tar -tvf dist/spaemis*.tar.gz | grep "$f"
          then
              echo
              echo "${f} not correctly packaged"
              exit 1
          fi
        done
    - uses: actions/upload-artifact@v3
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        name: dist
        path: dist

  deploy-pypi:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [linting-and-docs,build,create-dist]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}
